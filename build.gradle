plugins {
    id 'groovy'
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.3.72'
    id 'java-gradle-plugin'
    id "com.gradle.plugin-publish" version "0.11.0"
    id "maven-publish"
    id "jacoco"
    id "org.sonarqube" version "2.8"
    id "com.github.roroche.plantuml" version "1.0.0"
    id "org.fmiw.plantuml" version "0.1"
}

group 'com.github.roroche'
if (project.hasProperty('newVersion')) {
    project.version = project.newVersion
} else {
    project.version = '1.0.15-SNAPSHOT'
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation 'org.codehaus.groovy:groovy-all:3.0.3'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation gradleApi()
    implementation localGroovy()
    implementation('ch.ifocusit:plantuml-builder:1.4') {
        exclude group: 'com.google.guava', module: 'guava'
    }
//    implementation 'org.reflections:reflections:0.9.12'
//    implementation 'io.github.classgraph:classgraph:4.8.78'
    implementation 'com.google.guava:guava:29.0-jre'
    testImplementation('org.junit.jupiter:junit-jupiter:5.6.2')
    testImplementation 'com.pragmaticobjects.oo.tests:oo-tests:0.0.1'
    testImplementation 'com.pragmaticobjects.oo.tests:tests-junit5:0.0.1'
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.6.2")
    testImplementation gradleTestKit()
    testImplementation 'org.assertj:assertj-core:3.15.0'
}

test {
    useJUnitPlatform()
}

compileGroovy {
    dependsOn tasks.getByPath('compileKotlin')
    classpath += files(compileKotlin.destinationDir)
}

compileTestGroovy {
    dependsOn tasks.getByPath('compileTestKotlin')
    classpath += files(compileTestKotlin.destinationDir)
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

jacocoTestReport {
    executionData(tasks.withType(Test))
    reports {
        xml.enabled = true
    }
    dependsOn(check)
}

sonarqube {
    properties {
        property "sonar.projectKey", "RoRoche_plantuml-gradle-plugin"
        property "sonar.organization", "roroche"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

tasks.sonarqube.dependsOn(check, jacocoTestReport)

gradlePlugin {
    plugins {
        plantUmlPlugin {
            id = 'com.github.roroche.plantuml'
            implementationClass = 'com.github.roroche.plantuml.PlantUmlPlugin'
        }
    }
}

publishing {
    publications {
        pluginPublication(MavenPublication) {
            from components.java
            groupId project.group
            artifactId "plantuml-gradle-plugin"
            version project.version
        }
    }
}

pluginBundle {
    website = 'https://github.com/RoRoche/plantuml-gradle-plugin'
    vcsUrl = 'https://github.com/RoRoche/plantuml-gradle-plugin.git'
    tags = [
            'plantuml',
            'plantuml-diagrams',
            'plantuml-generator',
            'living-documentation'
    ]

    plugins {
        plantUmlPlugin {
            id = 'com.github.roroche.plantuml'
            displayName = 'PlantUML plugin'
            description = 'Gradle plugin to build PlantUML diagrams from code (for living and up-to-date documentation)'
        }
    }
}

classDiagram {
    packageName = "com.github.roroche"
    outputFile = project.file('diagrams/class_diagram.plantuml')
    ignoredClasses = [
            "com.github.roroche.plantuml.diagrams.Diagram\$Simple",
            "com.github.roroche.plantuml.diagrams.Diagram\$Wrap",
            "com.github.roroche.plantuml.classes.Classes\$Simple",
            "com.github.roroche.plantuml.classes.Classes\$Wrap"
    ]
}

plantuml {
    options {
        outputDir = project.file('diagrams')
    }

    diagrams {
        classes {
            sourceFile = project.file('diagrams/class_diagram.plantuml')
        }
    }
}

generateDiagramClasses.dependsOn(buildClassDiagram)
